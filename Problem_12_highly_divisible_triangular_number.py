"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

import timeit
import math


def divisors(n):
    large_divisors = []
    for i in range(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i * i != n:
                large_divisors.append(n / i)

    for divisor in reversed(large_divisors):
        yield divisor


def triangle_num(limit=500):
    t_nth = 2
    t_val = 1
    while True:
        t_val += t_nth
        factors_amount = list(divisors(t_val))
        if len(factors_amount) >= limit:
            return t_val
        t_nth += 1


setup1 = 'from __main__ import triangle_num'

print(f'Execution time: ' +
      f'{(timeit.timeit("print(triangle_num(500))", setup= setup1, number=1))}.')
